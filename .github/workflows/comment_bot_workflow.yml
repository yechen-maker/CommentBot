# 工作流的名称
name: Navix Auto Comment Bot

on:
  # 1. 定时触发
  schedule:
    # cron 表达式使用 UTC 时间。'30 1 * * *' 对应 UTC 时间的 1:30 AM。
    # 这相当于北京时间 (UTC+8) 的上午 9:30。
    - cron: '30 1 * * *'
  
  # 2. 手动触发
  # 允许你在 GitHub 仓库的 Actions 页面手动运行此工作流
  workflow_dispatch:

jobs:
  run-comment-bot:
    # 使用最新的 Ubuntu 虚拟机运行
    runs-on: ubuntu-latest

    steps:
      # 第一步：检出你的仓库代码
      # 以便工作流可以访问你的 Python 脚本
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      # 指定使用 Python 3.10 版本
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 第三步：安装脚本所需的依赖库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # 【重要修改】在这里添加 beautifulsoup4
          pip install requests beautifulsoup4

      # 第四步：运行评论脚本
      # 这是核心步骤，它会执行你的 Python 文件
      - name: Run comment script
        env:
          # 将你在 GitHub Secrets 中设置的密钥映射为环境变量
          # 脚本将通过 os.environ.get() 读取这些变量
          
          # 第一个账号
          NAVIX_EMAIL: ${{ secrets.NAVIX_EMAIL }}
          NAVIX_PASSWORD: ${{ secrets.NAVIX_PASSWORD }}
          
          # # 第二个账号
          # NAVIX_EMAIL2: ${{ secrets.NAVIX_EMAIL2 }}
          # NAVIX_PASSWORD2: ${{ secrets.NAVIX_PASSWORD2 }}
          
          # 如果未来添加了 NAVIX_EMAIL3, NAVIX_PASSWORD3 等 Secrets, 在这里继续添加即可
          # NAVIX_EMAIL3: ${{ secrets.NAVIX_EMAIL3 }}
          # NAVIX_PASSWORD3: ${{ secrets.NAVIX_PASSWORD3 }}

        # 确保这里的文件名与你实际的 Python 脚本文件名一致
        run: python comment_bot.py
